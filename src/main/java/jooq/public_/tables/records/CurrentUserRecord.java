/**
 * This class is generated by jOOQ
 */
package jooq.public_.tables.records;


import jooq.public_.tables.CurrentUser;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.8.6"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CurrentUserRecord extends TableRecordImpl<CurrentUserRecord> implements Record3<String, byte[], byte[]> {

    private static final long serialVersionUID = -940687530;

    /**
     * Setter for <code>PUBLIC.CURRENT_USER.USER_NAME</code>.
     */
    public void setUserName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>PUBLIC.CURRENT_USER.USER_NAME</code>.
     */
    public String getUserName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>PUBLIC.CURRENT_USER.SALT</code>.
     */
    public void setSalt(byte[] value) {
        set(1, value);
    }

    /**
     * Getter for <code>PUBLIC.CURRENT_USER.SALT</code>.
     */
    public byte[] getSalt() {
        return (byte[]) get(1);
    }

    /**
     * Setter for <code>PUBLIC.CURRENT_USER.PASSWORD</code>.
     */
    public void setPassword(byte[] value) {
        set(2, value);
    }

    /**
     * Getter for <code>PUBLIC.CURRENT_USER.PASSWORD</code>.
     */
    public byte[] getPassword() {
        return (byte[]) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, byte[], byte[]> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row3<String, byte[], byte[]> valuesRow() {
        return (Row3) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return CurrentUser.CURRENT_USER.USER_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field2() {
        return CurrentUser.CURRENT_USER.SALT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<byte[]> field3() {
        return CurrentUser.CURRENT_USER.PASSWORD;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getUserName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value2() {
        return getSalt();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public byte[] value3() {
        return getPassword();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CurrentUserRecord value1(String value) {
        setUserName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CurrentUserRecord value2(byte[] value) {
        setSalt(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CurrentUserRecord value3(byte[] value) {
        setPassword(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CurrentUserRecord values(String value1, byte[] value2, byte[] value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached CurrentUserRecord
     */
    public CurrentUserRecord() {
        super(CurrentUser.CURRENT_USER);
    }

    /**
     * Create a detached, initialised CurrentUserRecord
     */
    public CurrentUserRecord(String userName, byte[] salt, byte[] password) {
        super(CurrentUser.CURRENT_USER);

        set(0, userName);
        set(1, salt);
        set(2, password);
    }
}
